<class>
    <keyword>class</keyword>
    <identifier>Main</identifier>
    <symbol>{</symbol>
    <classVarDec>
        <keyword>field</keyword>
        <keyword>int</keyword>
        <identifier>x</identifier>
        <symbol>,</symbol>
        <identifier>y</identifier>
        <symbol>,</symbol>
        <identifier>z</identifier>
        <symbol>;</symbol>
    </classVarDec>
    <classVarDec>
        <keyword>static</keyword>
        <identifier>Array</identifier>
        <identifier>arr</identifier>
        <symbol>;</symbol>
    </classVarDec>
    <classVarDec>
        <keyword>field</keyword>
        <keyword>boolean</keyword>
        <identifier>bol</identifier>
        <symbol>;</symbol>
    </classVarDec>
    <subroutineDec>
        <keyword>constructor</keyword>
        <identifier>Main</identifier>
        <identifier>new</identifier>
        <symbol>(</symbol>
        <parameterList>
            <keyword>int</keyword>
            <identifier>Ax</identifier>
            <symbol>,</symbol>
            <keyword>int</keyword>
            <identifier>Ay</identifier>
            <symbol>,</symbol>
            <keyword>int</keyword>
            <identifier>Asize</identifier>
        </parameterList>
        <symbol>)</symbol>
        <subroutineBody>
            <symbol>{</symbol>
            <statements>
                <doStatement>
                    <keyword>do</keyword>
                    <identifier>someType</identifier>
                    <symbol>.</symbol>
                    <identifier>draw</identifier>
                    <symbol>(</symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier>a</identifier>
                            </term>
                        </expression>
                        <symbol>,</symbol>
                        <expression>
                            <term>
                                <identifier>b</identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol>)</symbol>
                    <symbol>;</symbol>
                </doStatement>
                <returnStatement>
                    <keyword>return</keyword>
                    <expression>
                        <term>
                            <keyword>this</keyword>
                        </term>
                    </expression>
                    <symbol>;</symbol>
                </returnStatement>
            </statements>
            <symbol>}</symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword>function</keyword>
        <keyword>void</keyword>
        <identifier>main</identifier>
        <symbol>(</symbol>
        <parameterList>
            <keyword>int</keyword>
            <identifier>a</identifier>
            <symbol>,</symbol>
            <identifier>Array</identifier>
            <identifier>ar</identifier>
            <symbol>,</symbol>
            <keyword>boolean</keyword>
            <identifier>flag</identifier>
        </parameterList>
        <symbol>)</symbol>
        <subroutineBody>
            <symbol>{</symbol>
            <statements>
                <varDec>
                    <keyword>var</keyword>
                    <keyword>char</keyword>
                    <identifier>i</identifier>
                    <symbol>;</symbol>
                </varDec>
                <varDec>
                    <keyword>var</keyword>
                    <identifier>Array</identifier>
                    <identifier>v1</identifier>
                    <symbol>,</symbol>
                    <identifier>v2</identifier>
                    <symbol>;</symbol>
                </varDec>
                <letStatement>
                    <keyword>let</keyword>
                    <identifier>i</identifier>
                    <symbol>=</symbol>
                    <expression>
                        <term>
                            <integerconstant>0</integerconstant>
                        </term>
                    </expression>
                </letStatement>
                <symbol>;</symbol>
                <returnStatement>
                    <keyword>return</keyword>
                    <symbol>;</symbol>
                </returnStatement>
            </statements>
            <symbol>}</symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword>method</keyword>
        <keyword>char</keyword>
        <identifier>m1</identifier>
        <symbol>(</symbol>
        <parameterList></parameterList>
        <symbol>)</symbol>
        <subroutineBody>
            <symbol>{</symbol>
            <statements>
                <whileStatement>
                    <keyword>while</keyword>
                    <symbol>(</symbol>
                    <expression>
                        <term>
                            <identifier>x</identifier>
                        </term>
                        <symbol>&gt;</symbol>
                        <term>
                            <integerconstant>1</integerconstant>
                        </term>
                    </expression>
                    <symbol>)</symbol>
                    <symbol>{</symbol>
                    <statements>
                        <letStatement>
                            <keyword>let</keyword>
                            <identifier>y</identifier>
                            <symbol>=</symbol>
                            <expression>
                                <term>
                                    <identifier>y</identifier>
                                </term>
                                <symbol>+</symbol>
                                <term>
                                    <integerconstant>1</integerconstant>
                                </term>
                            </expression>
                        </letStatement>
                        <symbol>;</symbol>
                    </statements>
                    <symbol>}</symbol>
                </whileStatement>
                <returnStatement>
                    <keyword>return</keyword>
                    <expression>
                        <term>
                            <stringconstant>a</stringconstant>
                        </term>
                    </expression>
                    <symbol>;</symbol>
                </returnStatement>
            </statements>
            <symbol>}</symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword>method</keyword>
        <keyword>void</keyword>
        <identifier>m2</identifier>
        <symbol>(</symbol>
        <parameterList></parameterList>
        <symbol>)</symbol>
        <subroutineBody>
            <symbol>{</symbol>
            <statements>
                <ifStatement>
                    <keyword>if</keyword>
                    <symbol>(</symbol>
                    <expression>
                        <term>
                            <identifier>x</identifier>
                        </term>
                        <symbol>&gt;</symbol>
                        <term>
                            <integerconstant>1</integerconstant>
                        </term>
                    </expression>
                    <symbol>)</symbol>
                    <symbol>{</symbol>
                    <statements>
                        <letStatement>
                            <keyword>let</keyword>
                            <identifier>y</identifier>
                            <symbol>=</symbol>
                            <expression>
                                <term>
                                    <identifier>y</identifier>
                                </term>
                                <symbol>+</symbol>
                                <term>
                                    <integerconstant>1</integerconstant>
                                </term>
                            </expression>
                        </letStatement>
                        <symbol>;</symbol>
                    </statements>
                    <symbol>}</symbol>
                    <keyword>else</keyword>
                    <symbol>{</symbol>
                    <statements>
                        <letStatement>
                            <keyword>let</keyword>
                            <identifier>a</identifier>
                            <symbol>=</symbol>
                            <expression>
                                <term>
                                    <stringconstant>hi there</stringconstant>
                                </term>
                            </expression>
                        </letStatement>
                        <symbol>;</symbol>
                    </statements>
                    <symbol>}</symbol>
                </ifStatement>
                <returnStatement>
                    <keyword>return</keyword>
                    <symbol>;</symbol>
                </returnStatement>
            </statements>
            <symbol>}</symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol>}</symbol>
</class>
